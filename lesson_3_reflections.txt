When would you want to use a remote repository rather than keeping all your work local?

    A remote repository can be beneficial when collaborating with other
    programers or when you want to submit work from multiple computers, say
    from work, and then from home.  Having a remote repository allows you to
    'bring' your work with you wherever you go.
    
    
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Because you may not want some of the changes that have been uploaded
	to GitHub.  For instance, if you are collaborating on a project, and
	someone else uploads a new file.  You can look at this file and
	determine if its something you want before including it on your local
	repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A fork is when you take an existing project on GitHub, and clone it.
	All on their servers.  This allows you to modify the poject in any
	way you'd like, and also give credit to the originator of the project.
	A clone is anytime you copy a git repository, either from machine to
	machine, all on GitHub(aka fork) or from  GitHub to your machine.
	A branch is a parallel version of your project, that is in the same
	repository, but is decidedly different in some manner that makes
	you want to keep it separate from the master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

	The benefit is that it allows you to work offline if necessary.  Also
	so that you can look at the work of fellow collaborators and compare
	it to yours before you decide to merge your master with GitHub's 
	master

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I feel that collborating without GitHub would be much more difficult
	to do.  You would likely have to do it via e-mail, in which case you
	upload your file you'd like to share, the other person would have to
	download it, and then compare it using git diff.  There would be no
	centralized commit history for everyone to look at, only the commit
	history on each individual's machine.  Git and GitHub provide
	programmers with a lot of tools in a convient way to develop and 
	collaborate on their projects.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Making changes in a separate branch allows you to make, and upload
	changes to a program without necesserily effecting the 'working'
	master branch.  It is more complex to download the most recent master,
	merge it into your branch, and then upload your local master, and from
	there you can make a pull request to merge that into GitHub's master.
	But it allows for controlled collaboration on a project between many
	users.  It requires that each change to the master branch on GitHub
	be approved and looked over before being commited, which can come in
	very handy when you have a plethore of people working on a project.